import io
import [] : string
import [] : functional

const last = (ls) => ls[ls.length()-1]

const pop = (stack) => {
    const value = stack.last()
    stack.remove(stack.length()-1)
    return value
}

const input = io.readf("input.txt").split("\n\n")
var crate_setup = input[0]
const instructions = input[1]

crate_setup = crate_setup.split("\n").map((e) => e.replaceAll("    ", " ").split(" "))

const number_of_stacks = crate_setup[0].length()

var stacks = []

for (0..number_of_stacks) {
    stacks.append([])
}

for (crate_setup, i, row) {
    if (i < number_of_stacks) {
        for (row, j, v) {
            if (v != "" and stacks[j] != None) {
                stacks[j].insert(v[1], 0)
            }
        }
    }
}

const instruction_codes = 
    instructions
    .split("\n")
    .map((e) => e
            .replaceAll("move ", "")
            .replaceAll(" from", "")
            .replaceAll(" to", "")
            .split(" "))

for (instruction_codes, index, code) {
    const count = code[0].number()
    const from_index = code[1].number()-1
    const to_index = code[2].number()-1

    for (0..count) {
        const value = stacks[from_index].pop()
        stacks[to_index].append(value)
    }
}

var top_crates = ""

for (stacks, i, stack) {
    top_crates += string(stack.last())
}

const answer = () => top_crates